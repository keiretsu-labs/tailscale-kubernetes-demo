apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: homeassistant-tls
  namespace: external-name
  annotations:
    cert-manager.io/cluster-issuer: global-issuer
    kubernetes.io/tls-acme: 'true'
spec:
  ingressClassName: haproxy
  rules:
  - host: homeassistant.${INGRESS_DOMAIN}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: homeassistant-svc
            port:
              number: 80
  tls:
  - secretName: homeassistant-tls
    hosts:
    - homeassistant.${INGRESS_DOMAIN}
--- 
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: truenas-tls
  namespace: external-name
  annotations:
    cert-manager.io/cluster-issuer: global-issuer
    kubernetes.io/tls-acme: 'true'
spec:
  ingressClassName: haproxy
  rules:
  - host: truenas.${INGRESS_DOMAIN}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: truenas-svc
            port:
              number: 80
  tls:
  - secretName: truenas-tls
    hosts:
    - truenas.${INGRESS_DOMAIN}
--- 
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kvm-tls
  namespace: external-name
  annotations:
    cert-manager.io/cluster-issuer: global-issuer
    haproxy.org/server-ssl: "true"
    haproxy.org/ssl-redirect: "true"  
    kubernetes.io/tls-acme: 'true'
spec:
  ingressClassName: haproxy
  rules:
  - host: kvm.${INGRESS_DOMAIN}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kvm-svc
            port:
              number: 443
  tls:
  - secretName: kvm-tls
    hosts:
    - kvm.${INGRESS_DOMAIN}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: proxmox-tls
  namespace: external-name
  annotations:
    cert-manager.io/cluster-issuer: global-issuer
    haproxy.org/server-ssl: "true"
    haproxy.org/ssl-redirect: "true"  
    kubernetes.io/tls-acme: 'true'
spec:
  ingressClassName: haproxy
  rules:
  - host: proxmox.${INGRESS_DOMAIN}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: proxmox-svc
            port:
              number: 8006
  tls:
  - secretName: proxmox-tls
    hosts:
    - proxmox.${INGRESS_DOMAIN}
--- 
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: router-tls
  namespace: external-name
  annotations:
    cert-manager.io/cluster-issuer: global-issuer
    kubernetes.io/tls-acme: 'true'
spec:
  ingressClassName: haproxy
  rules:
  - host: router.${INGRESS_DOMAIN}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: router-svc
            port:
              number: 80
  tls:
  - secretName: router-tls
    hosts:
    - router.${INGRESS_DOMAIN}
--- 
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jellyfin-tls
  namespace: external-name
  annotations:
    cert-manager.io/cluster-issuer: global-issuer
    kubernetes.io/tls-acme: 'true'
spec:
  ingressClassName: haproxy
  rules:
  - host: jellyfin.${INGRESS_DOMAIN}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jellyfin-svc
            port:
              number: 8096
  tls:
  - secretName: jellyfin-tls
    hosts:
    - jellyfin.${INGRESS_DOMAIN}
--- 
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: uptime-tls
  namespace: external-name
  annotations:
    cert-manager.io/cluster-issuer: global-issuer
    kubernetes.io/tls-acme: 'true'
spec:
  ingressClassName: haproxy
  rules:
  - host: uptime.${INGRESS_DOMAIN}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: uptime-svc
            port:
              number: 3001
  tls:
  - secretName: uptime-tls
    hosts:
    - uptime.${INGRESS_DOMAIN}
--- 
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frigate-tls
  namespace: external-name
  annotations:
    cert-manager.io/cluster-issuer: global-issuer
    kubernetes.io/tls-acme: 'true'
spec:
  ingressClassName: haproxy
  rules:
  - host: frigate.${INGRESS_DOMAIN}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frigate-svc
            port:
              number: 5000
  tls:
  - secretName: frigate-tls
    hosts:
    - frigate.${INGRESS_DOMAIN}