---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns
rules:
  - apiGroups: [""]
    resources: ["services", "endpoints", "pods"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["extensions", "networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "watch", "list"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["list", "watch"]
  # Gatway resources
  - apiGroups: ["gateway.networking.k8s.io"]
    resources: ["gateways", "httproutes", "tlsroutes", "tcproutes", "udproutes"]
    verbs: ["get", "watch", "list"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns-viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
subjects:
  - kind: ServiceAccount
    name: external-dns
    namespace: dns # This needs to match the targetNamespace
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns-primary
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: external-dns-primary
  template:
    metadata:
      labels:
        app: external-dns-primary
    spec:
      serviceAccountName: external-dns
      containers:
        - name: external-dns
          image: registry.k8s.io/external-dns/external-dns:v0.13.5
          env:
            - name: EXTERNAL_DNS_PIHOLE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pihole
                  key: "password"
          args:
            - --source=gateway-httproute
            - --source=gateway-tlsroute
            - --source=gateway-tcproute
            - --source=gateway-udproute
            - --source=service
            - --source=ingress
            - --registry=noop
            - --provider=pihole
            - --pihole-server=http://pihole-primary-web.dns
      securityContext:
        fsGroup: 65534 # Required for reading token
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns-secondary
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: external-dns-secondary
  template:
    metadata:
      labels:
        app: external-dns-secondary
    spec:
      serviceAccountName: external-dns
      containers:
        - name: external-dns
          image: registry.k8s.io/external-dns/external-dns:v0.13.5
          env:
            - name: EXTERNAL_DNS_PIHOLE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pihole
                  key: "password"
          args:
            - --source=gateway-httproute
            - --source=gateway-tlsroute
            - --source=gateway-tcproute
            - --source=gateway-udproute
            - --source=service
            - --source=ingress
            - --registry=noop
            - --provider=pihole
            - --pihole-server=http://pihole-secondary-web.dns
      securityContext:
        fsGroup: 65534 # Required for reading token
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns-unifi
  labels:
    app.kubernetes.io/name: external-dns
    app.kubernetes.io/instance: external-dns-unifi
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: external-dns
      app.kubernetes.io/instance: external-dns-unifi
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: external-dns
        app.kubernetes.io/instance: external-dns-unifi
    spec:
      serviceAccountName: external-dns
      securityContext:
        fsGroup: 65534
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: external-dns
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: registry.k8s.io/external-dns/external-dns:v0.15.0
          imagePullPolicy: IfNotPresent
          args:
            - --source=gateway-httproute
            - --source=gateway-tlsroute
            - --source=gateway-tcproute
            - --source=gateway-udproute
            - --source=service
            - --source=ingress
            - --log-level=debug
            - --log-format=text
            - --interval=1m
            - --source=service
            - --policy=sync
            - --registry=txt
            - --txt-owner-id=default
            - --txt-prefix=k8s.
            - --provider=webhook
          ports:
            - name: http
              protocol: TCP
              containerPort: 7979
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
        - name: webhook
          image: ghcr.io/kashalls/external-dns-unifi-webhook:main
          imagePullPolicy: IfNotPresent
          env:
            - name: UNIFI_HOST
              value: https://192.168.50.1
            - name: UNIFI_EXTERNAL_CONTROLLER
              value: "false"
            - name: UNIFI_API_KEY
              valueFrom:
                secretKeyRef:
                  key: api-key
                  name: external-dns-unifi-secret
            - name: LOG_LEVEL
              value: debug
          ports:
            - name: http-webhook
              protocol: TCP
              containerPort: 8080
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http-webhook
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /readyz
              port: http-webhook
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5 